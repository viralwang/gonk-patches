From d4bd8feb1367536fb1b5e634936005dffa3fc153 Mon Sep 17 00:00:00 2001
From: viralwang <vwang@mozilla.com>
Date: Mon, 11 May 2015 14:34:33 +0800
Subject: [PATCH] add led for KeyLayoutMap scan code

---
 widget/gonk/libui/KeyLayoutMap.cpp |   80 ++++++++++++++++++++++++++++++++++++
 widget/gonk/libui/KeyLayoutMap.h   |   10 +++++
 widget/gonk/libui/Keyboard.cpp     |    3 ++
 widget/gonk/libui/Keyboard.h       |    2 +
 widget/gonk/libui/KeycodeLabels.h  |   21 ++++++++++
 5 files changed, 116 insertions(+)

diff --git a/widget/gonk/libui/KeyLayoutMap.cpp b/widget/gonk/libui/KeyLayoutMap.cpp
index cd8fef5..8af4b84 100644
--- a/widget/gonk/libui/KeyLayoutMap.cpp
+++ b/widget/gonk/libui/KeyLayoutMap.cpp
@@ -149,6 +149,40 @@ status_t KeyLayoutMap::mapAxis(int32_t scanCode, AxisInfo* outAxisInfo) const {
     return NO_ERROR;
 }
 
+status_t KeyLayoutMap::findScanCodeForLed(int32_t ledCode, int32_t* outScanCode) const {
+    const size_t N = mLedsByScanCode.size();
+    for (size_t i = 0; i < N; i++) {
+        if (mLedsByScanCode.valueAt(i).ledCode == ledCode) {
+            *outScanCode = mLedsByScanCode.keyAt(i);
+#if DEBUG_MAPPING
+            ALOGD("findScanCodeForLed: ledCode=%d, scanCode=%d.", ledCode, *outScanCode);
+#endif
+            return NO_ERROR;
+        }
+    }
+#if DEBUG_MAPPING
+            ALOGD("findScanCodeForLed: ledCode=%d ~ Not found.", ledCode);
+#endif
+    return NAME_NOT_FOUND;
+}
+
+status_t KeyLayoutMap::findUsageCodeForLed(int32_t ledCode, int32_t* outUsageCode) const {
+    const size_t N = mLedsByUsageCode.size();
+    for (size_t i = 0; i < N; i++) {
+        if (mLedsByUsageCode.valueAt(i).ledCode == ledCode) {
+            *outUsageCode = mLedsByUsageCode.keyAt(i);
+#if DEBUG_MAPPING
+            ALOGD("findUsageForLed: ledCode=%d, usage=%x.", ledCode, *outUsageCode);
+#endif
+            return NO_ERROR;
+        }
+    }
+#if DEBUG_MAPPING
+            ALOGD("findUsageForLed: ledCode=%d ~ Not found.", ledCode);
+#endif
+    return NAME_NOT_FOUND;
+}
+
 
 // --- KeyLayoutMap::Parser ---
 
@@ -178,6 +212,10 @@ status_t KeyLayoutMap::Parser::parse() {
                 mTokenizer->skipDelimiters(WHITESPACE);
                 status_t status = parseAxis();
                 if (status) return status;
+            } else if (keywordToken == "led") {
+                mTokenizer->skipDelimiters(WHITESPACE);
+                status_t status = parseLed();
+                if (status) return status;
             } else {
                 ALOGE("%s: Expected keyword, got '%s'.", mTokenizer->getLocation().string(),
                         keywordToken.string());
@@ -363,4 +401,46 @@ status_t KeyLayoutMap::Parser::parseAxis() {
     return NO_ERROR;
 }
 
+status_t KeyLayoutMap::Parser::parseLed() {
+    String8 codeToken = mTokenizer->nextToken(WHITESPACE);
+    bool mapUsage = false;
+    if (codeToken == "usage") {
+        mapUsage = true;
+        mTokenizer->skipDelimiters(WHITESPACE);
+        codeToken = mTokenizer->nextToken(WHITESPACE);
+    }
+    char* end;
+    int32_t code = int32_t(strtol(codeToken.string(), &end, 0));
+    if (*end) {
+        ALOGE("%s: Expected led %s number, got '%s'.", mTokenizer->getLocation().string(),
+                mapUsage ? "usage" : "scan code", codeToken.string());
+        return BAD_VALUE;
+    }
+
+    KeyedVector<int32_t, Led>& map = mapUsage ? mMap->mLedsByUsageCode : mMap->mLedsByScanCode;
+    if (map.indexOfKey(code) >= 0) {
+        ALOGE("%s: Duplicate entry for led %s '%s'.", mTokenizer->getLocation().string(),
+                mapUsage ? "usage" : "scan code", codeToken.string());
+        return BAD_VALUE;
+    }
+
+    mTokenizer->skipDelimiters(WHITESPACE);
+    String8 ledCodeToken = mTokenizer->nextToken(WHITESPACE);
+    int32_t ledCode = getLedByLabel(ledCodeToken.string());
+    if (ledCode < 0) {
+        ALOGE("%s: Expected LED code label, got '%s'.", mTokenizer->getLocation().string(),
+                ledCodeToken.string());
+        return BAD_VALUE;
+    }
+
+#if DEBUG_PARSER
+    ALOGD("Parsed led %s: code=%d, ledCode=%d.",
+            mapUsage ? "usage" : "scan code", code, ledCode);
+#endif
+
+    Led led;
+    led.ledCode = ledCode;
+    map.add(code, led);
+    return NO_ERROR;
+}
 };
diff --git a/widget/gonk/libui/KeyLayoutMap.h b/widget/gonk/libui/KeyLayoutMap.h
index c6f6cdc..8a61134 100644
--- a/widget/gonk/libui/KeyLayoutMap.h
+++ b/widget/gonk/libui/KeyLayoutMap.h
@@ -67,6 +67,8 @@ public:
     status_t mapKey(int32_t scanCode, int32_t usageCode,
             int32_t* outKeyCode, uint32_t* outFlags) const;
     status_t findScanCodesForKey(int32_t keyCode, Vector<int32_t>* outScanCodes) const;
+    status_t findScanCodeForLed(int32_t ledCode, int32_t* outScanCode) const;
+    status_t findUsageCodeForLed(int32_t ledCode, int32_t* outUsageCode) const;
 
     status_t mapAxis(int32_t scanCode, AxisInfo* outAxisInfo) const;
 
@@ -79,9 +81,16 @@ private:
         uint32_t flags;
     };
 
+    struct Led {
+        int32_t ledCode;
+    };
+
+
     KeyedVector<int32_t, Key> mKeysByScanCode;
     KeyedVector<int32_t, Key> mKeysByUsageCode;
     KeyedVector<int32_t, AxisInfo> mAxes;
+    KeyedVector<int32_t, Led> mLedsByScanCode;
+    KeyedVector<int32_t, Led> mLedsByUsageCode;
 
     KeyLayoutMap();
 
@@ -99,6 +108,7 @@ private:
     private:
         status_t parseKey();
         status_t parseAxis();
+        status_t parseLed();
     };
 };
 
diff --git a/widget/gonk/libui/Keyboard.cpp b/widget/gonk/libui/Keyboard.cpp
index 0914359..7272bdb 100644
--- a/widget/gonk/libui/Keyboard.cpp
+++ b/widget/gonk/libui/Keyboard.cpp
@@ -204,6 +204,9 @@ const char* getAxisLabel(int32_t axisId) {
     return lookupLabelByValue(axisId, AXES);
 }
 
+int32_t getLedByLabel(const char* label) {
+    return int32_t(lookupValueByLabel(label, LEDS));
+}
 static int32_t setEphemeralMetaState(int32_t mask, bool down, int32_t oldMetaState) {
     int32_t newMetaState;
     if (down) {
diff --git a/widget/gonk/libui/Keyboard.h b/widget/gonk/libui/Keyboard.h
index 1dacbb3..65921b2 100644
--- a/widget/gonk/libui/Keyboard.h
+++ b/widget/gonk/libui/Keyboard.h
@@ -105,6 +105,8 @@ extern int32_t getAxisByLabel(const char* label);
  */
 extern const char* getAxisLabel(int32_t axisId);
 
+extern int32_t getLedByLabel(const char* label);
+
 /**
  * Updates a meta state field when a key is pressed or released.
  */
diff --git a/widget/gonk/libui/KeycodeLabels.h b/widget/gonk/libui/KeycodeLabels.h
index bf7569f..9f99459 100644
--- a/widget/gonk/libui/KeycodeLabels.h
+++ b/widget/gonk/libui/KeycodeLabels.h
@@ -356,4 +356,25 @@ static const KeycodeLabel AXES[] = {
     { NULL, -1 }
 };
 
+static const KeycodeLabel LEDS[] = {
+    { "NUM_LOCK", 1},
+    { "CAPS_LOCK", 2},
+    { "SCROLL_LOCK", 3},
+    { "COMPOSE", 4},
+    { "KANA", 5},
+    { "SLEEP", 6},
+    { "SUSPEND", 7},
+    { "MUTE", 8},
+    { "MISC", 9},
+    { "MAIL", 10},
+    { "CHARGING", 11},
+    { "CONTROLLER_1", 12},
+    { "CONTROLLER_2", 13},
+    { "CONTROLLER_3", 14},
+    { "CONTROLLER_4", 15},
+
+    // NOTE: If you add new LEDs here, you must also add them to Input.h
+    { NULL, 0 }
+};
+
 #endif // _ANDROIDFW_KEYCODE_LABELS_H
-- 
1.7.10.4

